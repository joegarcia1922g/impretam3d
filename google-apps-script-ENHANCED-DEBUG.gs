// Google Apps Script MEJORADO - Impretam 3D Contact Form
// Versi√≥n con DIAGN√ìSTICO AVANZADO para resolver problema de emails
// Basado en tu c√≥digo actual + debug adicional

// CONFIGURACI√ìN
const ADMIN_EMAIL = 'impretam3d@gmail.com';
const DEBUG_MODE = true; // Activar logs detallados

// CONFIGURACI√ìN DE LA COLA
const SPREADSHEET_ID = 'TU_SPREADSHEET_ID'; // Reemplaza con el ID de tu hoja de c√°lculo
const SHEET_NAME = 'ContactQueue';

// Funci√≥n de logging mejorada
function debugLog(message, data = null) {
  const timestamp = new Date().toISOString();
  const logMessage = `[${timestamp}] ${message}`;
  console.log(logMessage);
  
  if (data) {
    console.log("Data:", JSON.stringify(data, null, 2));
  }
}

// Funci√≥n para manejar peticiones GET (diagn√≥stico y CORS)
function doGet(e) {
  debugLog("üîç doGet iniciado - petici√≥n de diagn√≥stico");
  
  const output = ContentService.createTextOutput(JSON.stringify({
    status: "ok",
    message: "Google Apps Script funcionando correctamente",
    timestamp: new Date().toISOString(),
    version: "2.4-DEBUG-ENHANCED",
    adminEmail: ADMIN_EMAIL,
    debugMode: DEBUG_MODE
  }));
  
  output.setMimeType(ContentService.MimeType.JSON);
  
  debugLog("‚úÖ doGet completado");
  return output;
}

// Funci√≥n para inicializar la hoja de c√°lculo de la cola
function initializeQueue() {
  const spreadsheet = SpreadsheetApp.openById(SPREADSHEET_ID);
  let sheet = spreadsheet.getSheetByName(SHEET_NAME);

  if (!sheet) {
    sheet = spreadsheet.insertSheet(SHEET_NAME);
    sheet.appendRow(['Timestamp', 'Name', 'Phone', 'Email', 'Message', 'Files']);
    debugLog(`‚úÖ Hoja de cola creada: ${SHEET_NAME}`);
  } else {
    debugLog(`‚úÖ Hoja de cola ya existe: ${SHEET_NAME}`);
  }
}

// Revisar y asegurar que cada solicitud se maneje de forma independiente
function doPost(e) {
  const startTime = new Date();
  debugLog("üéØ doPost iniciado");

  try {
    if (!e) {
      debugLog("‚ùå CR√çTICO: El objeto 'e' es undefined");
      return ContentService.createTextOutput(JSON.stringify({
        success: false,
        error: "Objeto 'e' es undefined - problema cr√≠tico en deployment",
        timestamp: startTime.toISOString()
      })).setMimeType(ContentService.MimeType.JSON);
    }

    debugLog("üì® Datos recibidos", {
      hasParameter: !!e.parameter,
      parameterKeys: e.parameter ? Object.keys(e.parameter) : [],
      hasPostData: !!e.postData,
      postDataType: e.postData ? e.postData.type : null
    });

    let data;
    if (e.parameter && Object.keys(e.parameter).length > 0) {
      data = e.parameter;
      data.hasFiles = data.hasFiles === 'true';
      if (data.files && typeof data.files === 'string') {
        try {
          data.files = JSON.parse(data.files);
          debugLog("‚úÖ Archivos parseados correctamente", { count: data.files.length });
        } catch (fileParseError) {
          debugLog("‚ö†Ô∏è Error parseando archivos", fileParseError);
          data.hasFiles = false;
          data.files = [];
        }
      }
      if (!Array.isArray(data.files)) {
        data.files = [];
        data.hasFiles = false;
      }
    } else if (e.postData && e.postData.contents) {
      try {
        data = JSON.parse(e.postData.contents);
        debugLog("‚úÖ Datos JSON parseados");
      } catch (parseError) {
        debugLog("‚ùå Error parseando JSON", parseError);
        throw new Error("Error parseando datos JSON: " + parseError.message);
      }
    } else {
      debugLog("‚ö†Ô∏è No se recibieron datos v√°lidos, usando datos de debug");
      data = {
        name: "Usuario Debug",
        phone: "Sin tel√©fono",
        email: "debug@test.com",
        message: "Mensaje de debug - no se recibieron datos v√°lidos",
        hasFiles: false,
        files: []
      };
    }

    debugLog("üìã Datos extra√≠dos", data);

    // Guardar en la cola
    const spreadsheet = SpreadsheetApp.openById(SPREADSHEET_ID);
    const sheet = spreadsheet.getSheetByName(SHEET_NAME);
    sheet.appendRow([
      new Date().toISOString(),
      data.name,
      data.phone,
      data.email,
      data.message,
      JSON.stringify(data.files)
    ]);

    debugLog("‚úÖ Datos almacenados en la cola");

    return ContentService.createTextOutput(JSON.stringify({
      success: true,
      message: 'Datos almacenados en la cola',
      timestamp: new Date().toISOString()
    })).setMimeType(ContentService.MimeType.JSON);

  } catch (error) {
    debugLog("‚ùå Error cr√≠tico en doPost", error);
    return ContentService.createTextOutput(JSON.stringify({
      success: false,
      error: error.toString(),
      timestamp: new Date().toISOString()
    })).setMimeType(ContentService.MimeType.JSON);
  }
}

// Funci√≥n para procesar la cola
function processQueue() {
  const spreadsheet = SpreadsheetApp.openById(SPREADSHEET_ID);
  const sheet = spreadsheet.getSheetByName(SHEET_NAME);
  const rows = sheet.getDataRange().getValues();

  if (rows.length <= 1) {
    debugLog("üì≠ La cola est√° vac√≠a");
    return;
  }

  for (let i = 1; i < rows.length; i++) {
    const [timestamp, name, phone, email, message, files] = rows[i];

    try {
      const emailSubject = `üîî NUEVO CONTACTO: ${name} - Impretam 3D`;
      const emailBody = `
        Nombre: ${name}
        Tel√©fono: ${phone}
        Email: ${email}
        Mensaje: ${message}
        Archivos: ${files}
      `;

      GmailApp.sendEmail(ADMIN_EMAIL, emailSubject, emailBody);
      debugLog(`‚úÖ Email enviado para ${name}`);

    } catch (error) {
      debugLog(`‚ùå Error enviando email para ${name}`, error);
    }
  }

  // Limpiar la cola
  sheet.deleteRows(2, rows.length - 1);
  debugLog("‚úÖ Cola procesada y limpiada");
}

// Funci√≥n para procesar archivos (misma l√≥gica que tienes)
function processFiles(data) {
  debugLog("üìÅ Procesando archivos adjuntos");

  const results = { processed: 0, successful: 0, failed: 0, details: [], totalSize: 0 };

  try {
    const totalSize = data.files.reduce((sum, file) => sum + file.size, 0);
    results.totalSize = totalSize;
    debugLog(`üìä Tama√±o total: ${(totalSize / 1024 / 1024).toFixed(2)} MB`);
    
    // Validar tama√±o total
    if (totalSize > 50 * 1024 * 1024) {
      throw new Error("El tama√±o total de los archivos excede el l√≠mite de 50MB.");
    }

    // Buscar o crear carpeta
    let folder;
    const folderName = "Impretam3D_Contactos";
    const folders = DriveApp.getFoldersByName(folderName);

    if (folders.hasNext()) {
      folder = folders.next();
      debugLog("üìÇ Usando carpeta existente:", folderName);
    } else {
      folder = DriveApp.createFolder(folderName);
      debugLog("üìÇ Carpeta creada:", folderName);
    }

    // Procesar cada archivo
    for (let i = 0; i < data.files.length; i++) {
      const file = data.files[i];
      results.processed++;

      try {
        debugLog(`üìé Procesando archivo ${i + 1}/${data.files.length}: ${file.name}`);

        // Validar tama√±o individual
        if (file.size > 50 * 1024 * 1024) {
          throw new Error(`El archivo "${file.name}" excede el l√≠mite de 50MB.`);
        }

        // Detectar tipo y extensi√≥n
        const fileName = file.name.toLowerCase();
        const hasValidExtension = fileName.includes('.') && fileName.lastIndexOf('.') > 0;

        if (!hasValidExtension) {
          throw new Error(`El archivo "${file.name}" no tiene una extensi√≥n v√°lida.`);
        }

        // Crear nombre para Drive
        const originalName = file.name;
        const baseName = originalName.substring(0, originalName.lastIndexOf('.'));
        const extension = originalName.substring(originalName.lastIndexOf('.'));
        const timestamp = new Date().toISOString().slice(0,10).replace(/-/g, '');
        const driveFileName = `${baseName}_${data.name}_${timestamp}_${i + 1}${extension}`;

        // Crear archivo
        const fileBlob = Utilities.newBlob(
          Utilities.base64Decode(file.content), 
          file.type || 'application/octet-stream', 
          driveFileName
        );

        const driveFile = folder.createFile(fileBlob);
        driveFile.setSharing(DriveApp.Access.ANYONE_WITH_LINK, DriveApp.Permission.VIEW);

        results.successful++;
        results.details.push({
          name: file.name,
          size: file.size,
          url: driveFile.getUrl(),
          driveFileName: driveFile.getName(),
          status: 'success'
        });

        debugLog(`‚úÖ Archivo subido: ${driveFile.getName()}`);

      } catch (fileError) {
        debugLog(`‚ùå Error procesando archivo ${file.name}`, fileError);
        results.failed++;
        results.details.push({
          name: file.name,
          size: file.size,
          error: fileError.message,
          status: 'error'
        });
      }
    }

    return results;

  } catch (error) {
    debugLog("‚ùå Error general procesando archivos", error);
    throw error;
  }
}

function getOrCreateFolder(folderName) {
  const folders = DriveApp.getFoldersByName(folderName);
  if (folders.hasNext()) {
    debugLog("üìÇ Usando carpeta existente:", folderName);
    return folders.next();
  }
  debugLog("üìÇ Carpeta creada:", folderName);
  return DriveApp.createFolder(folderName);
}

function validateFile(file) {
  if (file.size > 50 * 1024 * 1024) {
    throw new Error(`El archivo "${file.name}" excede el l√≠mite de 50MB.`);
  }
  if (!file.name.includes('.') || file.name.lastIndexOf('.') <= 0) {
    throw new Error(`El archivo "${file.name}" no tiene una extensi√≥n v√°lida.`);
  }
}

function saveFileToDrive(file, folder, userName, index) {
  const timestamp = new Date().toISOString().slice(0, 10).replace(/-/g, '');
  const [baseName, extension] = file.name.split(/\.(?=[^\.]+$)/);
  const driveFileName = `${baseName}_${userName}_${timestamp}_${index + 1}.${extension}`;
  const fileBlob = Utilities.newBlob(
    Utilities.base64Decode(file.content),
    file.type || 'application/octet-stream',
    driveFileName
  );
  const driveFile = folder.createFile(fileBlob);
  driveFile.setSharing(DriveApp.Access.ANYONE_WITH_LINK, DriveApp.Permission.VIEW);
  return driveFile;
}

function handleFileError(file, error, results) {
  debugLog(`‚ùå Error procesando archivo ${file.name}`, error);
  results.failed++;
  results.details.push({
    name: file.name,
    size: file.size,
    error: error.message,
    status: 'error'
  });
}

// Funciones de prueba (tus funciones existentes mejoradas)
function testFunction() {
  debugLog("üöÄ Iniciando funci√≥n de prueba mejorada");
  
  try {
    const emailSubject = "üß™ PRUEBA MEJORADA - Nuevo contacto de Test User - Impretam 3D";
    const emailBody = `
ESTE ES UN EMAIL DE PRUEBA MEJORADO

===================================
DATOS DE PRUEBA:
===================================
üë§ Nombre: Test User
üìû Tel√©fono: 1234567890
üìß Email: test@example.com
üí¨ Mensaje: Este es un mensaje de prueba del sistema mejorado

===================================
INFORMACI√ìN DEL SISTEMA:
===================================
‚è∞ Enviado: ${new Date().toLocaleString('es-ES')}
üåê Script Version: 2.4-DEBUG-ENHANCED
üÜî Script URL: ${ScriptApp.getService().getUrl()}
üìß Email destino: ${ADMIN_EMAIL}
üîß Debug Mode: ${DEBUG_MODE}

===================================
SI RECIBES ESTE EMAIL:
‚úÖ Google Apps Script puede enviar emails
‚úÖ Los permisos est√°n correctos  
‚úÖ La cuenta de destino funciona

SI NO RECIBES ESTE EMAIL:
‚ùå Revisar carpeta SPAM
‚ùå Verificar cuenta ${ADMIN_EMAIL}
‚ùå Verificar permisos del script
    `;
    
    GmailApp.sendEmail(ADMIN_EMAIL, emailSubject, emailBody);
    debugLog("‚úÖ Email de prueba mejorada enviado");
    
    return "Prueba mejorada completada - revisa tu email";
    
  } catch (error) {
    debugLog("‚ùå Error en testFunction mejorada", error);
    throw error;
  }
}

function testPermissions() {
  debugLog("üîë Probando permisos detalladamente");
  
  try {
    // Probar Drive
    const folders = DriveApp.getFolders();
    debugLog("‚úÖ Acceso a Drive: OK");
    
    // Probar Gmail
    const drafts = GmailApp.getDrafts();
    debugLog("‚úÖ Acceso a Gmail: OK");
    
    // Probar creaci√≥n de archivo
    const testFile = DriveApp.createFile("test_permissions.txt", "Test", "text/plain");
    testFile.setTrashed(true); // Eliminar inmediatamente
    debugLog("‚úÖ Creaci√≥n de archivos: OK");
    
    debugLog("üéâ Todos los permisos verificados correctamente");
    return "Permisos verificados correctamente";
    
  } catch (error) {
    debugLog("‚ùå Error de permisos", error);
    throw error;
  }
}

function debugFunction() {
  debugLog("üîç Funci√≥n de debug mejorada iniciada");
  
  try {
    const info = {
      timestamp: new Date().toISOString(),
      scriptUrl: ScriptApp.getService().getUrl(),
      adminEmail: ADMIN_EMAIL,
      debugMode: DEBUG_MODE,
      version: "2.4-DEBUG-ENHANCED"
    };
    
    debugLog("üìã Informaci√≥n del sistema", info);
    
    return `Debug completado - ${info.timestamp}`;
  } catch (error) {
    debugLog("‚ùå Error en debugFunction", error);
    throw error;
  }
}

// Funci√≥n para diagn√≥stico completo
function runCompleteDiagnostic() {
  debugLog("üè• Iniciando diagn√≥stico completo");
  
  try {
    // Verificar permisos
    testPermissions();
    
    // Enviar email de prueba
    testFunction();
    
    // Informaci√≥n del sistema
    debugFunction();
    
    debugLog("‚úÖ Diagn√≥stico completo finalizado");
    return "Diagn√≥stico completo finalizado - revisa tu email";
    
  } catch (error) {
    debugLog("‚ùå Error en diagn√≥stico completo", error);
    throw error;
  }
}
